name: WebApp Deploy
on:
  workflow_dispatch:
  push:
    branches:
      - 'develop'
      - 'main'

jobs:
  set-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.envdev.outputs.environment }}${{ steps.envprod.outputs.environment }}
    steps:
      - name: Set environment to staging
        if: endsWith(github.ref, '/develop')
        id: envdev
        run: echo "environment=staging" >> $GITHUB_OUTPUT
      - name: Set environment to prod
        if: endsWith(github.ref, '/main')
        id: envprod
        run: echo "environment=production" >> $GITHUB_OUTPUT

  build-and-deploy:
    runs-on: ubuntu-latest
    container: fleek/create-react-app:node-16
    needs: [set-environment]
    if: needs.set-environment.outputs.environment != ''
    environment: ${{ needs.set-environment.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Install NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: 'yarn'
      - name: Install depdendencies
        run: yarn install --pure-lockfile
      - name: Test
        run: yarn test
      - name: Build
        run: yarn build --mode ${{ needs.set-environment.outputs.environment }}
        env:
          VITE_REACT_APP_DEPLOY_VERSION: ${{ github.sha }}
          VITE_REACT_APP_DEPLOY_ENVIRONMENT: ${{ needs.set-environment.outputs.environment }}
          VITE_REACT_APP_ANALYTICS_KEY: ${{ secrets.VITE_REACT_APP_ANALYTICS_KEY }}
          VITE_IPFS_API_KEY: ${{secrets.VITE_IPFS_API_KEY}}
          VITE_ETHERSCAN_API_KEY: ${{secrets.VITE_ETHERSCAN_API_KEY}}
          VITE_POLYGONSCAN_API_KEY: ${{secrets.VITE_POLYGONSCAN_API_KEY}}
          VITE_INFURA_GOERLI_PROJECT_ID: ${{secrets.VITE_INFURA_GOERLI_PROJECT_ID}}
          VITE_INFURA_MAINNET_PROJECT_ID: ${{secrets.VITE_INFURA_MAINNET_PROJECT_ID}}
          VITE_WALLET_CONNECT_PROJECT_ID: ${{secrets.VITE_WALLET_CONNECT_PROJECT_ID}}
          VITE_INFURA_API_KEY: ${{secrets.VITE_INFURA_API_KEY}}
          VITE_ALCHEMY_KEY_POLYGON_MUMBAI: ${{secrets.VITE_ALCHEMY_KEY_POLYGON_MUMBAI}}
          VITE_ALCHEMY_KEY_POLYGON_MAINNET: ${{secrets.VITE_ALCHEMY_KEY_POLYGON_MUMBAI}}
          VITE_ALCHEMY_KEY_MAINNET: ${{secrets.VITE_ALCHEMY_KEY_MAINNET}}
          VITE_ALCHEMY_KEY_GOERLI: ${{secrets.VITE_ALCHEMY_KEY_GOERLI}}
          VITE_COVALENT_API_KEY: ${{secrets.VITE_COVALENT_API_KEY}}
          NODE_OPTIONS: '--max-old-space-size=6656'
      - name: Activate Fleek
        env:
          FLEEK_FILE: ${{ needs.set-environment.outputs.environment }}
        run: mv ./.github/fleek/$FLEEK_FILE.json .fleek.json
      - name: Deploy through Fleek
        id: deploy
        uses: fleekhq/action-deploy@v1
        with:
          apiKey: ${{ secrets.FLEEK_API_KEY }}
          workDir: ${{ env.working-directory }}
      - name: Get the Fleek output url
        run: echo "The Fleek deploy url is ${{ steps.deploy.outputs.deployUrl }}"
      - name: Upload sourcemap to Kibana sourcemap endpoint (APM)
        env:
          COMMIT_SHA: ${{ github.sha }}
        run: |
          for f in $(find ./dist/assets/ -name *.js.map) ; do 
            curl -X POST "https://kibana-sourcemaps.aragon.org/api/apm/sourcemaps" \
              -H 'Content-Type: multipart/form-data' \
              -H 'kbn-xsrf: true' \
              -H 'Authorization: ApiKey ${{ secrets.APM_API_KEY }}' \
              -F service_name="zaragoza" \
              -F service_version="$COMMIT_SHA" \
              -F bundle_filepath="http://localhost/assets/$(basename $f)" \
              -F sourcemap=@$f
          done
