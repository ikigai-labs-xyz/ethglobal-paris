import "./chunk-ZN5QT2LU.js";
import {
  ref
} from "./chunk-KYRVEH3J.js";
import {
  __objRest,
  init_define_process_env
} from "./chunk-PLO4ZEQ3.js";

// dep:@snapshot-labs_lock_plugins_vue3
init_define_process_env();

// node_modules/@snapshot-labs/lock/plugins/vue3.ts
init_define_process_env();

// node_modules/@snapshot-labs/lock/src/lock.ts
init_define_process_env();
var Lock = class {
  constructor() {
    this.connectors = {};
    this.options = {};
  }
  addConnector(connector) {
    this.connectors[connector.key] = connector.connector;
    this.options[connector.key] = connector.options;
  }
  getConnector(key) {
    const options = this.options[key];
    return new this.connectors[key](options);
  }
};

// node_modules/@snapshot-labs/lock/plugins/vue3.ts
var name = "lock";
var instance;
var getInstance = () => instance;
var useLock = (_a) => {
  var options = __objRest(_a, []);
  if (instance)
    return instance;
  const isAuthenticated = ref(false);
  const provider = ref();
  const lockClient = new Lock();
  options.connectors.forEach((connector) => {
    lockClient.addConnector(connector);
  });
  async function login(connector) {
    const lockConnector = lockClient.getConnector(connector);
    const localProvider = await lockConnector.connect();
    if (localProvider !== null) {
      provider.value = localProvider;
    }
    if (provider.value) {
      localStorage.setItem(`_${name}.connector`, connector);
      isAuthenticated.value = true;
    }
    return provider;
  }
  async function logout() {
    const connector = await getConnector();
    if (connector) {
      const lockConnector = lockClient.getConnector(connector);
      await lockConnector.logout();
      localStorage.removeItem(`_${name}.connector`);
      isAuthenticated.value = false;
      provider.value = null;
    }
  }
  async function getConnector() {
    const connector = localStorage.getItem(`_${name}.connector`);
    if (connector) {
      const lockConnector = lockClient.getConnector(connector);
      const isLoggedIn = await lockConnector.isLoggedIn();
      return isLoggedIn ? connector : false;
    }
    return false;
  }
  instance = {
    isAuthenticated,
    provider,
    lockClient,
    login,
    logout,
    getConnector
  };
  return instance;
};
var LockPlugin = {
  install(app, options) {
    app.config.globalProperties.$auth = useLock(options);
  }
};
export {
  LockPlugin,
  getInstance,
  useLock
};
//# sourceMappingURL=@snapshot-labs_lock_plugins_vue3.js.map
