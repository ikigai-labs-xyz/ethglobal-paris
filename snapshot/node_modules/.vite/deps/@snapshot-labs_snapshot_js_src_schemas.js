import {
  init_define_process_env
} from "./chunk-BBLCKECE.js";

// dep:@snapshot-labs_snapshot_js_src_schemas
init_define_process_env();

// node_modules/@snapshot-labs/snapshot.js/src/schemas/index.ts
init_define_process_env();

// node_modules/@snapshot-labs/snapshot.js/src/schemas/space.json
var $schema = "http://json-schema.org/draft-07/schema#";
var $ref = "#/definitions/Space";
var definitions = {
  Space: {
    title: "Space",
    type: "object",
    properties: {
      name: {
        type: "string",
        title: "name",
        minLength: 1,
        maxLength: 32
      },
      private: {
        type: "boolean"
      },
      about: {
        type: "string",
        title: "about",
        maxLength: 160
      },
      guidelines: {
        type: "string",
        format: "customUrl",
        title: "guidelines",
        maxLength: 256
      },
      template: {
        type: "string",
        title: "template",
        maxLength: 1024
      },
      terms: {
        type: "string",
        title: "terms",
        format: "customUrl",
        maxLength: 256
      },
      avatar: {
        type: "string",
        title: "avatar",
        format: "uri",
        maxLength: 256
      },
      location: {
        type: "string",
        title: "location",
        maxLength: 24
      },
      website: {
        type: "string",
        title: "website",
        format: "customUrl",
        maxLength: 256
      },
      twitter: {
        type: "string",
        title: "twitter",
        pattern: "^[A-Za-z0-9_]*$",
        maxLength: 15
      },
      coingecko: {
        type: "string",
        title: "coingecko",
        pattern: "^[a-z0-9-]*$",
        maxLength: 32
      },
      github: {
        type: "string",
        title: "github",
        pattern: "^[A-Za-z0-9_-]*$",
        maxLength: 39
      },
      email: {
        type: "string",
        title: "email",
        maxLength: 32
      },
      network: {
        type: "string",
        title: "network",
        minLength: 1,
        maxLength: 32
      },
      symbol: {
        type: "string",
        title: "symbol",
        minLength: 1,
        maxLength: 16
      },
      skin: {
        type: "string",
        title: "skin",
        maxLength: 32
      },
      domain: {
        type: "string",
        title: "domain",
        maxLength: 64
      },
      strategies: {
        type: "array",
        minItems: 1,
        maxItems: 8,
        items: {
          type: "object",
          properties: {
            name: {
              type: "string",
              maxLength: 64,
              title: "name"
            },
            network: {
              type: "string",
              maxLength: 12,
              title: "network"
            },
            params: {
              type: "object",
              title: "params"
            }
          },
          required: ["name"],
          additionalProperties: false
        },
        title: "strategies"
      },
      members: {
        type: "array",
        maxItems: 100,
        items: {
          type: "string",
          pattern: "^0x[a-fA-F0-9]{40}$",
          minLength: 42,
          maxLength: 42
        },
        title: "members",
        uniqueItems: true
      },
      admins: {
        type: "array",
        maxItems: 100,
        items: {
          type: "string",
          pattern: "^0x[a-fA-F0-9]{40}$",
          minLength: 42,
          maxLength: 42
        },
        title: "admins",
        uniqueItems: true
      },
      moderators: {
        type: "array",
        maxItems: 100,
        items: {
          type: "string",
          pattern: "^0x[a-fA-F0-9]{40}$",
          minLength: 42,
          maxLength: 42
        },
        title: "moderators",
        uniqueItems: true
      },
      filters: {
        type: "object",
        properties: {
          defaultTab: {
            type: "string"
          },
          minScore: {
            type: "number",
            minimum: 0
          },
          onlyMembers: {
            type: "boolean"
          },
          invalids: {
            type: "array",
            items: {
              type: "string",
              maxLength: 64
            },
            title: "invalids"
          }
        },
        additionalProperties: false
      },
      validation: {
        type: "object",
        properties: {
          name: {
            type: "string",
            maxLength: 64,
            title: "name"
          },
          params: {
            type: "object",
            title: "params"
          }
        },
        required: ["name"],
        additionalProperties: false
      },
      voteValidation: {
        type: "object",
        properties: {
          name: {
            type: "string",
            maxLength: 32,
            title: "name"
          },
          params: {
            type: "object",
            title: "params"
          }
        },
        required: ["name"],
        additionalProperties: false
      },
      followValidation: {
        type: "object",
        properties: {
          name: {
            type: "string",
            maxLength: 32,
            title: "name"
          },
          params: {
            type: "object",
            title: "params"
          }
        },
        required: ["name"],
        additionalProperties: false
      },
      delegationPortal: {
        type: "object",
        properties: {
          delegationType: {
            type: "string",
            title: "Delegation type",
            description: "Specify the type of delegation that you are using",
            anyOf: [
              { const: "compound-governor", title: "Compound governor" }
            ]
          },
          delegationContract: {
            type: "string",
            format: "address",
            title: "Contract address",
            description: "The address of your delegation contract",
            examples: ["0x3901D0fDe202aF1427216b79f5243f8A022d68cf"]
          },
          delegationApi: {
            type: "string",
            format: "uri",
            title: "Delegation API",
            description: "The URL of your delegation API (e.g a subgraph)",
            examples: [
              "https://api.thegraph.com/subgraphs/name/arr00/uniswap-governance-v2"
            ]
          }
        },
        required: ["delegationType", "delegationApi", "delegationContract"],
        additionalProperties: false
      },
      allowAlias: {
        type: "boolean"
      },
      plugins: {
        type: "object"
      },
      voting: {
        type: "object",
        properties: {
          delay: {
            type: "integer",
            minimum: 0
          },
          period: {
            type: "integer",
            minimum: 0
          },
          type: {
            type: "string",
            title: "type"
          },
          quorum: {
            type: "number",
            minimum: 0
          },
          blind: {
            type: "boolean"
          },
          hideAbstain: {
            type: "boolean"
          },
          aliased: {
            type: "boolean"
          },
          privacy: {
            type: "string",
            enum: ["", "shutter"]
          }
        },
        additionalProperties: false
      },
      categories: {
        type: "array",
        maxItems: 2,
        items: {
          type: "string",
          enum: [
            "protocol",
            "social",
            "investment",
            "grant",
            "service",
            "media",
            "creator",
            "collector"
          ]
        }
      },
      treasuries: {
        type: "array",
        maxItems: 10,
        items: {
          type: "object",
          properties: {
            name: {
              type: "string",
              title: "Name",
              examples: ["e.g. Balancer DAO 1"],
              minLength: 1,
              maxLength: 64
            },
            address: {
              type: "string",
              title: "Contract address",
              examples: ["e.g. 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984"],
              pattern: "^0x[a-fA-F0-9]{40}$",
              minLength: 42,
              maxLength: 42
            },
            network: {
              type: "string",
              title: "Network",
              maxLength: 12
            }
          },
          required: ["name", "address", "network"],
          additionalProperties: false
        }
      },
      parent: {
        type: "string",
        title: "parent"
      },
      children: {
        type: "array",
        maxItems: 8,
        title: "children",
        items: {
          type: "string"
        }
      }
    },
    required: ["name", "network", "symbol", "strategies"],
    additionalProperties: false
  }
};
var space_default = {
  $schema,
  $ref,
  definitions
};

// node_modules/@snapshot-labs/snapshot.js/src/schemas/proposal.json
var $schema2 = "http://json-schema.org/draft-07/schema#";
var $ref2 = "#/definitions/Proposal";
var definitions2 = {
  Proposal: {
    title: "Proposal",
    type: "object",
    properties: {
      name: {
        type: "string",
        title: "name",
        minLength: 1,
        maxLength: 256
      },
      body: {
        type: "string",
        title: "body",
        minLength: 0,
        maxLength: 2e4
      },
      discussion: {
        type: "string",
        format: "customUrl",
        title: "discussion",
        maxLength: 256
      },
      choices: {
        type: "array",
        title: "choices",
        minItems: 1,
        maxItems: 500
      },
      type: {
        type: "string",
        enum: [
          "single-choice",
          "approval",
          "ranked-choice",
          "quadratic",
          "weighted",
          "custom",
          "basic"
        ]
      },
      snapshot: {
        type: "number",
        title: "snapshot"
      },
      start: {
        type: "number",
        title: "start",
        minimum: 1e9,
        maximum: 2e9
      },
      end: {
        type: "number",
        title: "end",
        minimum: 1e9,
        maximum: 2e9
      },
      metadata: {
        type: "object",
        title: "metadata"
      },
      app: {
        type: "string",
        title: "app",
        maxLength: 24
      }
    },
    required: ["name", "body", "choices", "snapshot", "start", "end"],
    additionalProperties: false
  }
};
var proposal_default = {
  $schema: $schema2,
  $ref: $ref2,
  definitions: definitions2
};

// node_modules/@snapshot-labs/snapshot.js/src/schemas/vote.json
var $schema3 = "http://json-schema.org/draft-07/schema#";
var $ref3 = "#/definitions/Vote";
var definitions3 = {
  Vote: {
    title: "Vote",
    type: "object",
    properties: {
      proposal: {
        type: "string",
        title: "proposal"
      },
      choice: {
        type: [
          "number",
          "array",
          "object",
          "boolean",
          "string"
        ],
        title: "choice"
      },
      metadata: {
        type: "object",
        title: "metadata"
      },
      reason: {
        type: "string",
        title: "reason",
        maxLength: 140
      },
      app: {
        type: "string",
        title: "app",
        maxLength: 24
      }
    },
    required: [
      "proposal",
      "choice"
    ],
    additionalProperties: false
  }
};
var vote_default = {
  $schema: $schema3,
  $ref: $ref3,
  definitions: definitions3
};

// node_modules/@snapshot-labs/snapshot.js/src/schemas/profile.json
var $schema4 = "http://json-schema.org/draft-07/schema#";
var $ref4 = "#/definitions/Profile";
var definitions4 = {
  Profile: {
    title: "Profile",
    type: "object",
    properties: {
      name: {
        type: "string",
        title: "name",
        maxLength: 32
      },
      about: {
        type: "string",
        title: "about",
        maxLength: 256
      },
      avatar: {
        type: "string",
        title: "avatar",
        format: "customUrl",
        maxLength: 256
      }
    },
    required: [],
    additionalProperties: false
  }
};
var profile_default = {
  $schema: $schema4,
  $ref: $ref4,
  definitions: definitions4
};

// node_modules/@snapshot-labs/snapshot.js/src/schemas/statement.json
var $schema5 = "http://json-schema.org/draft-07/schema#";
var $ref5 = "#/definitions/Statement";
var definitions5 = {
  Statement: {
    title: "Statement",
    type: "object",
    properties: {
      about: {
        type: "string",
        format: "long",
        title: "About",
        minLength: 1,
        maxLength: 140
      },
      statement: {
        type: "string",
        format: "long",
        title: "Statement"
      }
    },
    required: ["about"],
    additionalProperties: false
  }
};
var statement_default = {
  $schema: $schema5,
  $ref: $ref5,
  definitions: definitions5
};

// node_modules/@snapshot-labs/snapshot.js/src/schemas/zodiac.json
var $schema6 = "http://json-schema.org/draft-07/schema#";
var $ref6 = "#/definitions/Zodiac";
var definitions6 = {
  Zodiac: {
    title: "Zodiac",
    type: "object",
    properties: {
      safes: {
        title: "Safe(s)",
        type: "array",
        maxItems: 8,
        items: {
          type: "object",
          properties: {
            network: {
              title: "Network",
              type: "string"
            },
            multisend: {
              title: "Multisend contract address",
              type: "string"
            },
            realityAddress: {
              title: "Reality module address",
              type: "string"
            },
            umaAddress: {
              title: "UMA module address",
              type: "string"
            }
          },
          additionalProperties: false
        }
      },
      additionalProperties: false
    }
  }
};
var zodiac_default = {
  $schema: $schema6,
  $ref: $ref6,
  definitions: definitions6
};

// node_modules/@snapshot-labs/snapshot.js/src/schemas/index.ts
var schemas_default = {
  space: space_default.definitions.Space,
  proposal: proposal_default.definitions.Proposal,
  vote: vote_default.definitions.Vote,
  profile: profile_default.definitions.Profile,
  statement: statement_default.definitions.Statement,
  zodiac: zodiac_default.definitions.Zodiac
};

// dep:@snapshot-labs_snapshot_js_src_schemas
var snapshot_labs_snapshot_js_src_schemas_default = schemas_default;
export {
  snapshot_labs_snapshot_js_src_schemas_default as default
};
//# sourceMappingURL=@snapshot-labs_snapshot_js_src_schemas.js.map
