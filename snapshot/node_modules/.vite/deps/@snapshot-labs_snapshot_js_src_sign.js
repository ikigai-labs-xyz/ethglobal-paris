import {
  require_browser_ponyfill
} from "./chunk-3G52DIU7.js";
import {
  getAddress,
  init_lib2 as init_lib
} from "./chunk-WGG7N3HK.js";
import "./chunk-Y5LASUZI.js";
import "./chunk-O4YNI4VS.js";
import "./chunk-NBVFZNOZ.js";
import "./chunk-WWMNPJIJ.js";
import "./chunk-LYPAHAFJ.js";
import {
  __toESM,
  init_define_process_env
} from "./chunk-PLO4ZEQ3.js";

// dep:@snapshot-labs_snapshot_js_src_sign
init_define_process_env();

// node_modules/@snapshot-labs/snapshot.js/src/sign/index.ts
init_define_process_env();
var import_cross_fetch = __toESM(require_browser_ponyfill());
init_lib();

// node_modules/@snapshot-labs/snapshot.js/src/sign/types.ts
init_define_process_env();
var spaceTypes = {
  Space: [
    { name: "from", type: "address" },
    { name: "space", type: "string" },
    { name: "timestamp", type: "uint64" },
    { name: "settings", type: "string" }
  ]
};
var proposalTypes = {
  Proposal: [
    { name: "from", type: "address" },
    { name: "space", type: "string" },
    { name: "timestamp", type: "uint64" },
    { name: "type", type: "string" },
    { name: "title", type: "string" },
    { name: "body", type: "string" },
    { name: "discussion", type: "string" },
    { name: "choices", type: "string[]" },
    { name: "start", type: "uint64" },
    { name: "end", type: "uint64" },
    { name: "snapshot", type: "uint64" },
    { name: "plugins", type: "string" },
    { name: "app", type: "string" }
  ]
};
var cancelProposalTypes = {
  CancelProposal: [
    { name: "from", type: "address" },
    { name: "space", type: "string" },
    { name: "timestamp", type: "uint64" },
    { name: "proposal", type: "string" }
  ]
};
var cancelProposal2Types = {
  CancelProposal: [
    { name: "from", type: "address" },
    { name: "space", type: "string" },
    { name: "timestamp", type: "uint64" },
    { name: "proposal", type: "bytes32" }
  ]
};
var voteTypes = {
  Vote: [
    { name: "from", type: "address" },
    { name: "space", type: "string" },
    { name: "timestamp", type: "uint64" },
    { name: "proposal", type: "string" },
    { name: "choice", type: "uint32" },
    { name: "reason", type: "string" },
    { name: "app", type: "string" },
    { name: "metadata", type: "string" }
  ]
};
var voteArrayTypes = {
  Vote: [
    { name: "from", type: "address" },
    { name: "space", type: "string" },
    { name: "timestamp", type: "uint64" },
    { name: "proposal", type: "string" },
    { name: "choice", type: "uint32[]" },
    { name: "reason", type: "string" },
    { name: "app", type: "string" },
    { name: "metadata", type: "string" }
  ]
};
var voteStringTypes = {
  Vote: [
    { name: "from", type: "address" },
    { name: "space", type: "string" },
    { name: "timestamp", type: "uint64" },
    { name: "proposal", type: "string" },
    { name: "choice", type: "string" },
    { name: "reason", type: "string" },
    { name: "app", type: "string" },
    { name: "metadata", type: "string" }
  ]
};
var vote2Types = {
  Vote: [
    { name: "from", type: "address" },
    { name: "space", type: "string" },
    { name: "timestamp", type: "uint64" },
    { name: "proposal", type: "bytes32" },
    { name: "choice", type: "uint32" },
    { name: "reason", type: "string" },
    { name: "app", type: "string" },
    { name: "metadata", type: "string" }
  ]
};
var voteArray2Types = {
  Vote: [
    { name: "from", type: "address" },
    { name: "space", type: "string" },
    { name: "timestamp", type: "uint64" },
    { name: "proposal", type: "bytes32" },
    { name: "choice", type: "uint32[]" },
    { name: "reason", type: "string" },
    { name: "app", type: "string" },
    { name: "metadata", type: "string" }
  ]
};
var voteString2Types = {
  Vote: [
    { name: "from", type: "address" },
    { name: "space", type: "string" },
    { name: "timestamp", type: "uint64" },
    { name: "proposal", type: "bytes32" },
    { name: "choice", type: "string" },
    { name: "reason", type: "string" },
    { name: "app", type: "string" },
    { name: "metadata", type: "string" }
  ]
};
var followTypes = {
  Follow: [
    { name: "from", type: "address" },
    { name: "space", type: "string" }
  ]
};
var unfollowTypes = {
  Unfollow: [
    { name: "from", type: "address" },
    { name: "space", type: "string" }
  ]
};
var subscribeTypes = {
  Subscribe: [
    { name: "from", type: "address" },
    { name: "space", type: "string" }
  ]
};
var unsubscribeTypes = {
  Unsubscribe: [
    { name: "from", type: "address" },
    { name: "space", type: "string" }
  ]
};
var profileTypes = {
  Profile: [
    { name: "from", type: "address" },
    { name: "timestamp", type: "uint64" },
    { name: "profile", type: "string" }
  ]
};
var statementTypes = {
  Statement: [
    { name: "from", type: "address" },
    { name: "timestamp", type: "uint64" },
    { name: "space", type: "string" },
    { name: "about", type: "string" },
    { name: "statement", type: "string" }
  ]
};
var aliasTypes = {
  Alias: [
    { name: "from", type: "address" },
    { name: "alias", type: "address" }
  ]
};
var deleteSpaceType = {
  DeleteSpace: [
    { name: "from", type: "address" },
    { name: "space", type: "string" }
  ]
};

// node_modules/@snapshot-labs/snapshot.js/src/constants.json
var livenet = {
  hub: "https://hub.snapshot.org",
  sequencer: "https://seq.snapshot.org"
};
var testnet = {
  hub: "https://testnet.snapshot.org",
  sequencer: "https://testnet.seq.snapshot.org"
};
var local = {
  hub: "http://localhost:3000",
  sequencer: "http://localhost:3001"
};
var constants_default = {
  livenet,
  testnet,
  local
};

// node_modules/@snapshot-labs/snapshot.js/src/sign/index.ts
var NAME = "snapshot";
var VERSION = "0.1.4";
var domain = {
  name: NAME,
  version: VERSION
};
var Client = class {
  constructor(address = constants_default.livenet.sequencer) {
    address = address.replace(constants_default.livenet.hub, constants_default.livenet.sequencer);
    address = address.replace(constants_default.testnet.hub, constants_default.testnet.sequencer);
    address = address.replace(constants_default.local.hub, constants_default.local.sequencer);
    this.address = address;
  }
  async sign(web3, address, message, types) {
    const signer = (web3 == null ? void 0 : web3.getSigner) ? web3.getSigner() : web3;
    const checksumAddress = getAddress(address);
    message.from = message.from ? getAddress(message.from) : checksumAddress;
    if (!message.timestamp)
      message.timestamp = parseInt((Date.now() / 1e3).toFixed());
    const data = { domain, types, message };
    const sig = await signer._signTypedData(domain, data.types, message);
    return await this.send({ address: checksumAddress, sig, data });
  }
  async send(envelop) {
    const init = {
      method: "POST",
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json"
      },
      body: JSON.stringify(envelop)
    };
    return new Promise((resolve, reject) => {
      (0, import_cross_fetch.default)(this.address, init).then((res) => {
        if (res.ok)
          return resolve(res.json());
        throw res;
      }).catch((e) => e.json().then((json) => reject(json)));
    });
  }
  async space(web3, address, message) {
    return await this.sign(web3, address, message, spaceTypes);
  }
  async proposal(web3, address, message) {
    if (!message.discussion)
      message.discussion = "";
    if (!message.app)
      message.app = "";
    return await this.sign(web3, address, message, proposalTypes);
  }
  async cancelProposal(web3, address, message) {
    const type2 = message.proposal.startsWith("0x");
    return await this.sign(web3, address, message, type2 ? cancelProposal2Types : cancelProposalTypes);
  }
  async vote(web3, address, message) {
    const isShutter = (message == null ? void 0 : message.privacy) === "shutter";
    if (!message.reason)
      message.reason = "";
    if (!message.app)
      message.app = "";
    if (!message.metadata)
      message.metadata = "{}";
    const type2 = message.proposal.startsWith("0x");
    let type = type2 ? vote2Types : voteTypes;
    if (["approval", "ranked-choice"].includes(message.type))
      type = type2 ? voteArray2Types : voteArrayTypes;
    if (!isShutter && ["quadratic", "weighted"].includes(message.type)) {
      type = type2 ? voteString2Types : voteStringTypes;
      message.choice = JSON.stringify(message.choice);
    }
    if (isShutter)
      type = type2 ? voteString2Types : voteStringTypes;
    delete message.privacy;
    delete message.type;
    return await this.sign(web3, address, message, type);
  }
  async follow(web3, address, message) {
    return await this.sign(web3, address, message, followTypes);
  }
  async unfollow(web3, address, message) {
    return await this.sign(web3, address, message, unfollowTypes);
  }
  async subscribe(web3, address, message) {
    return await this.sign(web3, address, message, subscribeTypes);
  }
  async unsubscribe(web3, address, message) {
    return await this.sign(web3, address, message, unsubscribeTypes);
  }
  async profile(web3, address, message) {
    return await this.sign(web3, address, message, profileTypes);
  }
  async statement(web3, address, message) {
    return await this.sign(web3, address, message, statementTypes);
  }
  async alias(web3, address, message) {
    return await this.sign(web3, address, message, aliasTypes);
  }
  async deleteSpace(web3, address, message) {
    return await this.sign(web3, address, message, deleteSpaceType);
  }
};

// dep:@snapshot-labs_snapshot_js_src_sign
var snapshot_labs_snapshot_js_src_sign_default = Client;
export {
  snapshot_labs_snapshot_js_src_sign_default as default,
  domain
};
//# sourceMappingURL=@snapshot-labs_snapshot_js_src_sign.js.map
