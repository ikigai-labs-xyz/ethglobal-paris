import {
  init_lib as init_lib6,
  sha256
} from "./chunk-MSCW2UYV.js";
import {
  init_lib as init_lib5,
  toUtf8Bytes
} from "./chunk-W5NFZZW3.js";
import {
  init_lib as init_lib4,
  keccak256
} from "./chunk-Y5LASUZI.js";
import {
  BigNumber,
  init_lib as init_lib3
} from "./chunk-O4YNI4VS.js";
import {
  Logger,
  arrayify,
  concat,
  hexlify,
  init_lib,
  init_lib2,
  zeroPad
} from "./chunk-LYPAHAFJ.js";
import {
  __esm,
  init_define_process_env
} from "./chunk-PLO4ZEQ3.js";

// node_modules/@ethersproject/solidity/lib.esm/_version.js
var version;
var init_version = __esm({
  "node_modules/@ethersproject/solidity/lib.esm/_version.js"() {
    init_define_process_env();
    version = "solidity/5.7.0";
  }
});

// node_modules/@ethersproject/solidity/lib.esm/index.js
function _pack(type, value, isArray) {
  switch (type) {
    case "address":
      if (isArray) {
        return zeroPad(value, 32);
      }
      return arrayify(value);
    case "string":
      return toUtf8Bytes(value);
    case "bytes":
      return arrayify(value);
    case "bool":
      value = value ? "0x01" : "0x00";
      if (isArray) {
        return zeroPad(value, 32);
      }
      return arrayify(value);
  }
  let match = type.match(regexNumber);
  if (match) {
    let size = parseInt(match[2] || "256");
    if (match[2] && String(size) !== match[2] || size % 8 !== 0 || size === 0 || size > 256) {
      logger.throwArgumentError("invalid number type", "type", type);
    }
    if (isArray) {
      size = 256;
    }
    value = BigNumber.from(value).toTwos(size);
    return zeroPad(value, size / 8);
  }
  match = type.match(regexBytes);
  if (match) {
    const size = parseInt(match[1]);
    if (String(size) !== match[1] || size === 0 || size > 32) {
      logger.throwArgumentError("invalid bytes type", "type", type);
    }
    if (arrayify(value).byteLength !== size) {
      logger.throwArgumentError(`invalid value for ${type}`, "value", value);
    }
    if (isArray) {
      return arrayify((value + Zeros).substring(0, 66));
    }
    return value;
  }
  match = type.match(regexArray);
  if (match && Array.isArray(value)) {
    const baseType = match[1];
    const count = parseInt(match[2] || String(value.length));
    if (count != value.length) {
      logger.throwArgumentError(`invalid array length for ${type}`, "value", value);
    }
    const result = [];
    value.forEach(function(value2) {
      result.push(_pack(baseType, value2, true));
    });
    return concat(result);
  }
  return logger.throwArgumentError("invalid type", "type", type);
}
function pack(types, values) {
  if (types.length != values.length) {
    logger.throwArgumentError("wrong number of values; expected ${ types.length }", "values", values);
  }
  const tight = [];
  types.forEach(function(type, index) {
    tight.push(_pack(type, values[index]));
  });
  return hexlify(concat(tight));
}
function keccak2562(types, values) {
  return keccak256(pack(types, values));
}
function sha2562(types, values) {
  return sha256(pack(types, values));
}
var regexBytes, regexNumber, regexArray, Zeros, logger;
var init_lib7 = __esm({
  "node_modules/@ethersproject/solidity/lib.esm/index.js"() {
    "use strict";
    init_define_process_env();
    init_lib3();
    init_lib2();
    init_lib4();
    init_lib6();
    init_lib5();
    init_lib();
    init_version();
    regexBytes = new RegExp("^bytes([0-9]+)$");
    regexNumber = new RegExp("^(u?int)([0-9]*)$");
    regexArray = new RegExp("^(.*)\\[([0-9]*)\\]$");
    Zeros = "0000000000000000000000000000000000000000000000000000000000000000";
    logger = new Logger(version);
  }
});

export {
  pack,
  keccak2562 as keccak256,
  sha2562 as sha256,
  init_lib7 as init_lib
};
//# sourceMappingURL=chunk-B4M2Q3B2.js.map
