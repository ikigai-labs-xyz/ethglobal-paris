import {
  init_define_process_env
} from "./chunk-PLO4ZEQ3.js";

// node_modules/@snapshot-labs/snapshot.js/src/voting/quadratic.ts
init_define_process_env();
function calcPercentageOfSum(part, wholeArray) {
  const whole = wholeArray.reduce((a, b) => a + b, 0);
  const percent = part / whole;
  return isNaN(percent) ? 0 : percent;
}
function calcSqrt(percentageWeight, votingPower) {
  return Math.sqrt(percentageWeight * votingPower);
}
function calcSquare(num) {
  return num * num;
}
function calcReducedQuadraticScores(percentages, scoresTotal) {
  return percentages.map((p) => scoresTotal * p);
}
var QuadraticVoting = class {
  constructor(proposal, votes, strategies, selected) {
    this.proposal = proposal;
    this.votes = votes;
    this.strategies = strategies;
    this.selected = selected;
  }
  static isValidChoice(voteChoice, proposalChoices) {
    return typeof voteChoice === "object" && !Array.isArray(voteChoice) && voteChoice !== null && Object.keys(voteChoice).every((key) => (proposalChoices == null ? void 0 : proposalChoices[Number(key) - 1]) !== void 0) && Object.keys(voteChoice).length > 0 && Object.values(voteChoice).every((value) => typeof value === "number" && value >= 0) && Object.values(voteChoice).some((value) => typeof value === "number" && value > 0);
  }
  getValidVotes() {
    return this.votes.filter((vote) => QuadraticVoting.isValidChoice(vote.choice, this.proposal.choices));
  }
  getScores() {
    const validVotes = this.getValidVotes();
    const scoresTotal = this.getValidVotes().reduce((a, b) => a + b.balance, 0);
    const quadraticScores = this.proposal.choices.map((_, i) => {
      const votingPowerSqrt = validVotes.map((vote) => {
        const choiceWeightPercent = calcPercentageOfSum(vote.choice[i + 1], Object.values(vote.choice));
        return calcSqrt(choiceWeightPercent, vote.balance);
      }).reduce((a, b) => a + b, 0);
      return calcSquare(votingPowerSqrt);
    });
    const percentagesOfScores = quadraticScores.map((_, i) => calcPercentageOfSum(quadraticScores[i], quadraticScores));
    return calcReducedQuadraticScores(percentagesOfScores, scoresTotal);
  }
  getScoresByStrategy() {
    const validVotes = this.getValidVotes();
    const scoresTotal = this.getValidVotes().reduce((a, b) => a + b.balance, 0);
    const quadraticScoresByStrategy = this.proposal.choices.map((_, i) => this.strategies.map((_2, sI) => validVotes.map((vote) => {
      const choiceWeightPercentByStrategy = calcPercentageOfSum(vote.choice[i + 1], Object.values(vote.choice));
      return calcSqrt(choiceWeightPercentByStrategy, vote.scores[sI]);
    }).reduce((a, b) => a + b, 0))).map((arr) => arr.map((num) => [calcSquare(num)]));
    const reducedQuadraticScores = quadraticScoresByStrategy.map((_, i) => {
      const percentagesOfScores = this.strategies.map((_2, sI) => calcPercentageOfSum(quadraticScoresByStrategy[i][sI][0], quadraticScoresByStrategy.flat(2)));
      return calcReducedQuadraticScores(percentagesOfScores, scoresTotal);
    });
    return reducedQuadraticScores;
  }
  getScoresTotal() {
    return this.votes.reduce((a, b) => a + b.balance, 0);
  }
  getChoiceString() {
    return this.proposal.choices.map((choice, i) => {
      if (this.selected[i + 1]) {
        const percent = calcPercentageOfSum(this.selected[i + 1], Object.values(this.selected));
        return `${Math.round(percent * 1e3) / 10}% for ${choice}`;
      }
    }).filter((el) => el != null).join(", ");
  }
};

export {
  calcPercentageOfSum,
  calcSqrt,
  QuadraticVoting
};
//# sourceMappingURL=chunk-LRQ3O7WH.js.map
