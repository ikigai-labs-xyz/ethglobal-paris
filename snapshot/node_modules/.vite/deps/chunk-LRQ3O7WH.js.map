{
  "version": 3,
  "sources": ["../../@snapshot-labs/snapshot.js/src/voting/quadratic.ts"],
  "sourcesContent": ["import { QuadraticVote, QuadraticChoice, Strategy } from './types';\n\nexport function calcPercentageOfSum(\n  part: number,\n  wholeArray: number[]\n): number {\n  const whole = wholeArray.reduce((a, b) => a + b, 0);\n  const percent = part / whole;\n  return isNaN(percent) ? 0 : percent;\n}\n\nexport function calcSqrt(\n  percentageWeight: number,\n  votingPower: number\n): number {\n  return Math.sqrt(percentageWeight * votingPower);\n}\n\nfunction calcSquare(num: number): number {\n  return num * num;\n}\n\nfunction calcReducedQuadraticScores(\n  percentages: number[],\n  scoresTotal: number\n): number[] {\n  // Reduce each quadratic score so that the sum of quadratic scores matches\n  // the total scores.\n  // This is done to unsure that features like quorum still work as expected.\n  return percentages.map((p) => scoresTotal * p);\n}\n\nexport default class QuadraticVoting {\n  proposal: { choices: string[] };\n  votes: QuadraticVote[];\n  strategies: Strategy[];\n  selected: QuadraticChoice;\n\n  constructor(\n    proposal: { choices: string[] },\n    votes: QuadraticVote[],\n    strategies: Strategy[],\n    selected: QuadraticChoice\n  ) {\n    this.proposal = proposal;\n    this.votes = votes;\n    this.strategies = strategies;\n    this.selected = selected;\n  }\n\n  static isValidChoice(\n    voteChoice: QuadraticChoice,\n    proposalChoices: string[]\n  ): boolean {\n    return (\n      typeof voteChoice === 'object' &&\n      !Array.isArray(voteChoice) &&\n      voteChoice !== null &&\n      // If voteChoice object keys are not in choices, return false\n      Object.keys(voteChoice).every(\n        (key) => proposalChoices?.[Number(key) - 1] !== undefined\n      ) &&\n      // If voteChoice object is empty, return false\n      Object.keys(voteChoice).length > 0 &&\n      // If voteChoice object values have a negative number, return false\n      Object.values(voteChoice).every(\n        (value) => typeof value === 'number' && value >= 0\n      ) &&\n      // If voteChoice doesn't have any positive value, return false\n      Object.values(voteChoice).some(\n        (value) => typeof value === 'number' && value > 0\n      )\n    );\n  }\n\n  getValidVotes(): QuadraticVote[] {\n    return this.votes.filter((vote) =>\n      QuadraticVoting.isValidChoice(vote.choice, this.proposal.choices)\n    );\n  }\n\n  getScores(): number[] {\n    const validVotes = this.getValidVotes();\n    const scoresTotal = this.getValidVotes().reduce(\n      (a, b: any) => a + b.balance,\n      0\n    );\n\n    const quadraticScores = this.proposal.choices.map((_, i) => {\n      const votingPowerSqrt = validVotes\n        .map((vote) => {\n          const choiceWeightPercent = calcPercentageOfSum(\n            vote.choice[i + 1],\n            Object.values(vote.choice)\n          );\n          return calcSqrt(choiceWeightPercent, vote.balance);\n        })\n        .reduce((a, b: any) => a + b, 0);\n      return calcSquare(votingPowerSqrt);\n    });\n\n    const percentagesOfScores = quadraticScores.map((_, i) =>\n      calcPercentageOfSum(quadraticScores[i], quadraticScores)\n    );\n\n    return calcReducedQuadraticScores(percentagesOfScores, scoresTotal);\n  }\n\n  getScoresByStrategy(): number[][] {\n    const validVotes = this.getValidVotes();\n    const scoresTotal = this.getValidVotes().reduce(\n      (a, b: any) => a + b.balance,\n      0\n    );\n\n    const quadraticScoresByStrategy = this.proposal.choices\n      .map((_, i) =>\n        this.strategies.map((_, sI) =>\n          validVotes\n            .map((vote) => {\n              const choiceWeightPercentByStrategy = calcPercentageOfSum(\n                vote.choice[i + 1],\n                Object.values(vote.choice)\n              );\n              return calcSqrt(choiceWeightPercentByStrategy, vote.scores[sI]);\n            })\n            .reduce((a, b: any) => a + b, 0)\n        )\n      )\n      .map((arr) => arr.map((num) => [calcSquare(num)]));\n\n    const reducedQuadraticScores = quadraticScoresByStrategy.map((_, i) => {\n      const percentagesOfScores = this.strategies.map((_, sI) =>\n        calcPercentageOfSum(\n          quadraticScoresByStrategy[i][sI][0],\n          quadraticScoresByStrategy.flat(2)\n        )\n      );\n\n      return calcReducedQuadraticScores(percentagesOfScores, scoresTotal);\n    });\n\n    return reducedQuadraticScores;\n  }\n\n  getScoresTotal(): number {\n    return this.votes.reduce((a, b: any) => a + b.balance, 0);\n  }\n\n  getChoiceString(): string {\n    return this.proposal.choices\n      .map((choice, i) => {\n        if (this.selected[i + 1]) {\n          const percent = calcPercentageOfSum(\n            this.selected[i + 1],\n            Object.values(this.selected)\n          );\n          return `${Math.round(percent * 1000) / 10}% for ${choice}`;\n        }\n      })\n      .filter((el) => el != null)\n      .join(', ');\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
