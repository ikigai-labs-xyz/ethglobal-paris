import { type ComputedRef, type Ref, type ShallowRef } from 'vue';
import type { DetectOverflowOptions, Middleware, ReferenceElement } from '@floating-ui/dom';
import type { Options as OffsetOptions } from '@floating-ui/core/src/middleware/offset';
import type { Options as ShiftOptions } from '@floating-ui/core/src/middleware/shift';
import type { Options as FlipOptions } from '@floating-ui/core/src/middleware/flip';
import type { Options as AutoPlacementOptions } from '@floating-ui/core/src/middleware/autoPlacement';
import type { Options as HideOptions } from '@floating-ui/core/src/middleware/hide';
export declare function useFloatingMiddlewareFromProps(middleware: ShallowRef<Middleware[]>, referenceEl: ComputedRef<ReferenceElement | null>, floatingEl: ComputedRef<HTMLElement | null>, arrowRef: Ref<HTMLElement | null>, props: {
    offset?: OffsetOptions;
    shift?: boolean | number | Partial<ShiftOptions & DetectOverflowOptions>;
    flip?: boolean | number | Partial<FlipOptions & DetectOverflowOptions>;
    arrow?: boolean | number;
    autoPlacement?: boolean | Partial<AutoPlacementOptions & DetectOverflowOptions>;
    hide?: boolean | Partial<HideOptions & DetectOverflowOptions>;
    middleware?: Middleware[] | ((refs: {
        referenceEl: ComputedRef<ReferenceElement | null>;
        floatingEl: ComputedRef<HTMLElement | null>;
    }) => Middleware[]);
}): void;
